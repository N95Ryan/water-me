---
import Layout from "../layouts/Layout.astro";

const action = Astro.url.searchParams.get("action") || "login";
const isSignup = action === "signup";
---

<Layout title={isSignup ? "Inscription | Water Me" : "Connexion | Water Me"}>
  <div
    class="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-[#00617a] via-[#206f86] to-[#618c9f] text-white"
  >
    <div class="w-full max-w-md p-6 bg-white/10 rounded-xl backdrop-blur-sm">
      <h1 class="text-3xl font-bold text-center mb-8">
        {isSignup ? "Créer un compte" : "Connexion"}
      </h1>

      <div class="space-y-4">
        <!-- Formulaire d'inscription/connexion -->
        <form id="authForm" class="flex flex-col gap-4">
          <div class="space-y-2">
            <label for="email" class="block text-lg">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              placeholder="Votre email"
              class="w-full px-4 py-2 rounded-lg bg-white/20 border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50"
              required
            />
          </div>
          {
            isSignup && (
              <div class="space-y-2">
                <label for="password" class="block text-lg">
                  Mot de passe
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  placeholder="Votre mot de passe"
                  class="w-full px-4 py-2 rounded-lg bg-white/20 border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50"
                  required
                />
              </div>
            )
          }
          <button
            type="submit"
            class="w-full px-6 py-3 bg-white text-[#206f86] rounded-lg text-lg font-semibold shadow-lg hover:bg-gray-200 transition-colors"
          >
            {isSignup ? "S'inscrire" : "Se connecter"}
          </button>
        </form>

        <!-- Séparateur -->
        <div class="relative my-6">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-white/20"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-[#206f86] text-white/70"
              >Ou continuer avec</span
            >
          </div>
        </div>

        <!-- Boutons de connexion sociale -->
        <div class="space-y-3">
          <button
            id="googleLogin"
            class="w-full px-6 py-3 bg-white text-gray-800 rounded-lg text-lg font-semibold shadow-lg hover:bg-gray-100 transition-colors flex items-center justify-center gap-2"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
              ></path>
              <path
                fill="currentColor"
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
              ></path>
              <path
                fill="currentColor"
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
              ></path>
              <path
                fill="currentColor"
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
              ></path>
            </svg>
            Google
          </button>

          <button
            id="appleLogin"
            class="w-full px-6 py-3 bg-black text-white rounded-lg text-lg font-semibold shadow-lg hover:bg-gray-900 transition-colors flex items-center justify-center gap-2"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M17.05 20.28c-.98.95-2.05.88-3.08.41-1.09-.47-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.41C2.79 15.25 3.51 7.59 9.05 7.31c1.35.07 2.29.74 3.08.8 1.18-.05 2.31-.75 3.57-.84-.09 1.48.87 2.19 1.25 3.61-1.12.53-1.65 1.27-1.65 2.64 0 1.77 1.32 2.63 1.32 2.63-.01 1.13-.86 2.26-1.57 3.03zM12.03 7.25c-.15-2.23 1.66-4.07 3.74-4.25.29 2.58-2.34 4.5-3.74 4.25z"
              ></path>
            </svg>
            Apple
          </button>
        </div>

        <!-- Lien pour basculer entre inscription et connexion -->
        <p class="text-center mt-6 text-sm">
          {isSignup ? "Déjà un compte ?" : "Pas encore de compte ?"}
          <a
            href={isSignup ? "/auth?action=login" : "/auth?action=signup"}
            class="text-white hover:text-gray-200 ml-1 underline"
          >
            {isSignup ? "Se connecter" : "S'inscrire"}
          </a>
        </p>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from "../lib/supabase.ts";
  import { AuthError } from "@supabase/supabase-js";

  const isSignup = window.location.search.includes("action=signup");

  // Gestion du formulaire d'authentification
  const form = document.getElementById("authForm");
  if (form) {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const email = (event.target as HTMLFormElement).email.value;
      const password = isSignup
        ? (event.target as HTMLFormElement).password.value
        : undefined;

      try {
        if (isSignup && password) {
          const { error } = await supabase.auth.signUp({
            email,
            password,
            options: {
              emailRedirectTo: `${window.location.origin}/reminders`,
            },
          });
          if (error) throw error;
        } else {
          const { error } = await supabase.auth.signInWithOtp({ email });
          if (error) throw error;
        }
        window.location.href = "/reminders";
      } catch (error) {
        const authError = error as AuthError;
        console.error("Erreur d'authentification :", authError.message);
      }
    });
  }

  // Gestion de la connexion Google
  const googleButton = document.getElementById("googleLogin");
  if (googleButton) {
    googleButton.addEventListener("click", async () => {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: `${window.location.origin}/reminders`,
        },
      });
      if (error) console.error("Erreur de connexion Google :", error.message);
    });
  }

  // Gestion de la connexion Apple
  const appleButton = document.getElementById("appleLogin");
  if (appleButton) {
    appleButton.addEventListener("click", async () => {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "apple",
        options: {
          redirectTo: `${window.location.origin}/reminders`,
        },
      });
      if (error) console.error("Erreur de connexion Apple :", error.message);
    });
  }
</script>
